---
layout:     post
title:      "深入浅出SQLite(一)--整体介绍"
subtitle:   "Client，Layout，归纳笔记"
date:       2020-06-28
author:     "Alla"
header-img: "img/20200628/post-bg-sqlite-explore.jpg"
tags:
- Client
- Storage
- Database
- SQLite
---
SQLite对于客户端开发的同学来讲，应该不陌生。那么SQLite到底适合什么场景，出现数据加载慢或查不出的问题时如何排查解决，SQLite损坏时如何去定位并修复，对于基础架构师来说，如何对源码为C语言的SQLite进行封装供应用层调用？作者在深入浅出SQLite系列文章尝试一一和大家进行交流探讨。
今天是深入浅出SQLite系列的第一篇文章，本篇主要是针对Sqlite做一个整体介绍。
##什么是SQLite
###本质
它是一个轻量级（只有几百K）的开源ANSI-C库。
###解决的问题
主要是用来解决结构化数据在客户端的持久化存储问题。

##SQLite的主要特点
### 优点：
- 兼容性：数据库文件格式稳定，向后兼容，跨平台
- 单一性：只支持本地存储，并不支持网络访问
- 低依赖性：在最小配置下，只使用了 memcmp、strcmp 等少数几个标准库 API
###缺点：
- 安全性：
    - 无权限管理机制
    - 不支持加密（但可用开源的加密库代替系统内置的动态库实现加密，譬如 SQLCipher）
- SQL部分操作的缺失：
    - 不支持删除数据表的列项
    - 不支持更新视图
    - 不支持右外和联合查询
- 锁的粒度过粗

##SQLite的整体组成
##客户端对SQLite的支持
主流的移动操作系统（iOS & Android）均已内置
##SQLite的适用场景
- 硬件设备：移动手机，嵌入式，可穿戴设备等
- 软件场景：数量较多，关系较复杂的有本地持久化需求的结构化数据的增删改查



